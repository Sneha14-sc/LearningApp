//there are events that client use to send request to servers
const KITCHEN_ROOM= 'KITCHEN'; 
const WHOLE_RESTAURANT='RESTAURANT';
const COUNTER_ROOM='COUNTER';
const WAITER_ROOM='WAITER';
const JOIN='Join Room';
//there are actions which contain in the message from clients for coordinating events 
const KITCHEN={CANCEL_ITEM:'cancel item',DONE_ITEM:'done item'};
const COUNTER={PAY_ORDER:'Order paid'};
const WAITER={ADD_ITEMS: 'add new items',CANCEL_ITEM:'cancel item',CREATE_NEW_ODER:'New orderID'};
const SEVER_CMD='Sever command' // for event that generate command from server for later uses
/**
 * handles listern to different socket io event and brodcast socket to appropriate device
 * @param {socket.io} io instance for central server
 */
setUpSocketIo=function(io){
    var numSocket=0;
    io.on('connection', function (socket) {
        numSocket += 1;
        console.log(numSocket + ' clients connected');

        socket.on(JOIN, function (message) {
            /**
             * @message {string} message : include a room socket want to join
             */
            switch (message) {
                case KITCHEN_ROOM:
                    socket.join(KITCHEN_ROOM);
                    break;
                case COUNTER_ROOM:
                    socket.join(COUNTER_ROOM);
                    break;
                case WAITER_ROOM:
                    socket.join(WAITER_ROOM);
                    break;
                default:
                    socket.join(WHOLE_RESTAURANT);
            }
        });

        socket.on(KITCHEN_ROOM,function(action){
            /**
             * set up handle for message to KITCHEN and
             */
            switch (action.command) {
                //the first is the actions inside
                case KITCHEN.CANCEL_ITEM:
                    //TODO: do some thing
                    break;
                case KITCHEN.DONE_ITEM:
                    //TODO: do something
                    break;
                case WAITER.ADD_ITEMS:
                    //TODO: do something
                    break;
                default:
                    console.log('wrong message');
            }
            //send message to every one in the room
            //Send this event to everyone in the room.
            socket.to(KITCHEN_ROOM).emit(action.command,action.payload); //broadcast to all clients
        });
        //config for handles message in Waiter room
        socket.on(WAITER_ROOM,function(action){
            /**
             * set up handle for message to KITCHEN and
             */
            switch (action.command) {
                //the first is the action generated by another waiter
                case WAITER.CREATE_NEW_ODER:
                    //TODO: update other waiter machine
                    break;
                case COUNTER.PAY_ORDER:
                    //TODO: do something
                    break;
                default:
                    console.log('wrong message');
            }
            //send message to every one in the room
            //Send this event to everyone in the room.
            socket.to(WAITER_ROOM).emit(action.command,action.payload); //broadcast to all clients
        });


        socket.on('disconnect', function () {
            numSocket -= 1;
            console.log('Client disconnected.'+numSocket +'clients connected');
        });
    });
};